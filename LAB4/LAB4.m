clc;
clear;
close all;

s = tf('s');

% Варинат 1 -> Схема 1

K = 2;

W_rs = K / (s^4 + 5 * s^3 + 5* s^2 + 3 * s + 1)

W_zs = feedback(W_rs, 1)

% -----------------------------------------------------------------------------------------------

% Критерий Гурвица

% Матрица Гурвица

[hurwitz_matrix, hurwitz_dets] = create_hurwitz_matrix(W_zs);

% Вывод матрицы Гурвица
disp(hurwitz_matrix);

% Вывод определителей Гурвица
disp(hurwitz_dets);

% Определитли меняю знак -> система неустойчива

% -----------------------------------------------------------------------------------------------
% Критерий Найквиста

% Вывести в консоль полюса системы
pole(W_rs)
% Отобразить на комплексной плоскости нули и полюса системы
figure
pzmap(W_rs) % Полюcа на левой полуплоскости ->  смотрим на диаграмму Найквиста

% Построить диаграмму Найквиста
figure
nyquist(W_rs) 
% Диаграмма Найквиста охватывает точку (1, 0j) -> Система неустойчива

% -----------------------------------------------------------------------------------------------

% Строим переходную характеристику замкнутой системы
figure
step(W_zs) 
% По переходной характеристике видно, что система неустойчива

% -----------------------------------------------------------------------------------------------

% Устойчивость в частотной области
figure
margin(W_rs)
% Нет запаса по фазе -> Система неустойчива
% При этом видно, что если уменьшить K, то возможно поучить запас по фазе


% Изменяя коэффициент усиления, можно попробовать сделать систему устойчивой
% Попробуем найти границу устойчивости
for i = K:-0.001:1
    W_rs = i / (s^4 + 5 * s^3 + 5* s^2 + 3 * s + 1);
    W_zs = feedback(W_rs, 1);
    [hurwitz_matrix, hurwitz_dets] = create_hurwitz_matrix(W_zs);
    if(all(hurwitz_dets > 0) || all(hurwitz_dets < 0))
        W_rs
        W_zs
        hurwitz_matrix
        hurwitz_dets
        fprintf("Граница устойчивости: K = %g\n", i);
        figure
        nyquist(W_rs) 
        figure
        step(W_zs, 100) 
        figure
        margin(W_rs)
        break;
    end
end




function [hurwitz_matrix, hurwitz_dets] = create_hurwitz_matrix(W_zs)
    % MY_HURWITZ_FUNCTION - функция для создания матрицы Гурвица и массива ее определителей

    % Входные аргументы:
    %   W_zs - передаточная функция

    % Выходные аргументы:
    %   hurwitz_matrix - матрица Гурвица
    %   hurwitz_dets - массив определителей Гурвица

    % Получаем коэффициенты полинома числителя и знаменателя
    [num, den] = tfdata(W_zs, 'v');
    
    n = length(den) - 1;            % Размер матрицы Гурвица
    hurwitz_matrix = zeros(n, n);   % Инициализация матрицы Гурвица  
    hurwitz_dets = zeros(1, n);     % Инициализация массива определителей Гурвица

    % Заполняем матрицу Гурвица

    % Заполняем первые 2 строки
    k = 1;
    for i = 1 : (n + 1)
        if(mod(i,2) == 0)
            hurwitz_matrix(1, k) = den(i);
            k = k + 1;
        else
            hurwitz_matrix(2, k) = den(i);
        end
    end

    % Заполняем остальные строки (через сдвиги)
    for i = 3 : n
        hurwitz_matrix(i, :) = circshift(hurwitz_matrix(i - 2, :), [0, 1]);
    end

    % Определители Гурвица   
    for i = 1:n
        hurwitz_dets(i) = det(hurwitz_matrix(1:i, 1:i));
    end
end

